% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/spInterp_adw.R, R/spInterp_anusplin.R
\name{spInterp}
\alias{spInterp}
\alias{spInterp_adw}
\alias{spInterp_anusplin}
\title{Spatial interpolation}
\usage{
spInterp(
  points,
  dat,
  range,
  res = 1,
  fun.weight = c("cal_weight", "cal_weight_sf"),
  wFUN = c("wFUN_adw", "wFUN_idw", "wFUN_thiessen", "wFUN_mean"),
  .parallel = FALSE,
  ...,
  Z = NULL,
  weight = NULL
)

spInterp_adw(
  points,
  dat,
  range,
  res = 1,
  fun.weight = c("cal_weight", "cal_weight_sf"),
  ...
)

spInterp_anusplin(
  X,
  Y,
  range,
  outdir = "output",
  prefix = "RH",
  file.alt = NULL,
  overwrite = TRUE,
  ...
)
}
\arguments{
\item{points}{A matrix (N,2) with longitude and latitude of points of data observed}

\item{dat}{matrix, \verb{[npoint, ntime]}, the observed data used to interpolate grid}

\item{range}{\verb{[xmin, xmax, ymin, ymax]}}

\item{res}{the grid resolution (degree)}

\item{fun.weight}{function to calculate weight, one of
\code{c("cal_weight", "cal_weight_sf")}.}

\item{wFUN}{\verb{wFUN_*} functions, see \code{\link[=wFUN]{wFUN()}} for details}

\item{...}{other parameters to \link[plyr:ldply]{plyr::ldply}}

\item{Z}{covariates, not used}

\item{weight}{predefined weight to speed-up calculation, which is returned
by \code{\link[=spInterp]{spInterp()}} itself.}
}
\description{
The irregularly-spaced data are interpolated onto regular latitude-longitude
grids by weighting each station according to its distance or angle from the
center of the search radius \code{cdd}.
}
\examples{
library(ggplot2)

data(TempBrazil) # Temperature for some poins of Brazil

loc <- TempBrazil[, 1:2] \%>\% set_names(c("lon", "lat"))
dat <- TempBrazil[, 3] \%>\% as.matrix()  # Vector with observations in points

range <- c(-78, -34, -36, 5)
res = 1
# weight <- weight_adw(loc, range = range, res = 1)
# first example: 
r = spInterp_adw(loc, dat, range, res = res, cdd = 450)
print(str(r))
df = r \%$\% cbind(coord, value = predicted[, 1])
ggplot(df, aes(lon, lat)) +
  geom_raster(aes(fill = value)) +
  geom_point(data = loc, size = 0.5, shape = 3, color = "red") +
  lims(x = range[1:2], y = range[3:4])

# second example: use sf as backend, but of low computing efficiency, 100 times slower
r_sf = spInterp_adw(loc, dat, range, res = res, cdd = 450, fun.weight = "cal_weight_sf")
df_sf = r_sf \%$\% cbind(coord, value = predicted[, 1])
ggplot(df_sf, aes(lon, lat)) +
  geom_raster(aes(fill = value)) +
  geom_point(data = loc, size = 0.5, shape = 3, color = "red") +
  lims(x = range[1:2], y = range[3:4])

# third example: use a large `cdd`, set `cdd = 1000`
r = spInterp_adw(loc, dat, range, res = res, cdd = 1000)
df = r \%$\% cbind(coord, value = predicted[, 1])

ggplot(df, aes(lon, lat)) +
  geom_raster(aes(fill = value)) +
  geom_point(data = loc, size = 2.5, shape = 3, color = "red") + 
  lims(x = range[1:2], y = range[3:4])
}
\references{
\enumerate{
\item Xavier, A. C., King, C. W., & Scanlon, B. R. (2016). Daily gridded
meteorological variables in Brazil (1980-2013). International Journal of
Climatology, 36(6), 2644-2659. \url{doi:10.1002/joc.4518}
}
}
\seealso{
\code{\link[=wFUN]{wFUN()}}, \code{\link[=cal_weight]{cal_weight()}}
}
\author{
Dongdong Kong and Heyang Song
}
